
UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;

for example i run this query and then i realized the logic is false, how can i do something like undo the query like cntrl + z or something? can you tell me is there a way to do that please?

Let me explain the options for undoing changes in a database:

1. If you haven't committed the transaction yet:
```sql
ROLLBACK;
```
This will undo all changes made since the last COMMIT.

2. If you had previously taken a backup, you can restore from that backup.

3. If you know the old values, you can run another UPDATE query to set them back:
```sql
UPDATE Customers
SET ContactName = 'Previous_Name', City = 'Previous_City'
WHERE CustomerID = 1;
```

Best Practices to Prevent Such Issues:
1. Always wrap important UPDATE/DELETE operations in transactions:
```sql
BEGIN TRANSACTION;
    UPDATE Customers
    SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
    WHERE CustomerID = 1;
    -- Check if the result is what you wanted
    -- If yes: COMMIT;
    -- If no: ROLLBACK;
```

2. Before running UPDATE queries, first run a SELECT to verify you're updating the correct records:
```sql
SELECT * FROM Customers WHERE CustomerID = 1;
```

3. Take regular backups of your database.

Note: If you've already committed the changes and don't have a backup or don't know the previous values, there's no built-in "undo" function like ctrl+z in databases.

-------------------------------------------------------------
I'll explain transactions and ROLLBACK with practical examples!

A transaction is a sequence of SQL operations that are treated as a single unit. Think of it like a shopping cart - you can add or remove items (make changes), but nothing is final until you check out (COMMIT) or abandon the cart (ROLLBACK).

Here are different scenarios:

1. Basic Transaction with ROLLBACK:
```sql
BEGIN TRANSACTION;
    UPDATE Products 
    SET Price = Price * 1.1;  -- Increase all prices by 10%
    
    -- Oops, we didn't mean to increase ALL prices!
    ROLLBACK;  -- This cancels the price increase
```

2. Multiple Operations in One Transaction:
```sql
BEGIN TRANSACTION;
    -- Insert a new order
    INSERT INTO Orders (CustomerID, OrderDate) 
    VALUES (1, '2024-10-20');
    
    -- Update inventory
    UPDATE Products 
    SET Stock = Stock - 1 
    WHERE ProductID = 123;
    
    -- If something goes wrong
    -- ROLLBACK;  -- This would undo both the INSERT and UPDATE
    
    -- If everything is okay
    COMMIT;  -- This makes the changes permanent
```

3. Using Transaction with Error Checking:
```sql
BEGIN TRANSACTION;
    -- Try to withdraw money
    UPDATE Accounts 
    SET Balance = Balance - 1000 
    WHERE AccountID = 1;
    
    -- Check if balance went negative
    IF EXISTS (SELECT 1 FROM Accounts WHERE AccountID = 1 AND Balance < 0) 
    BEGIN
        ROLLBACK;  -- Undo the withdrawal
        PRINT 'Insufficient funds';
    END
    ELSE
    BEGIN
        COMMIT;  -- Complete the withdrawal
        PRINT 'Withdrawal successful';
    END
```

4. Data Import Safety:
```sql
BEGIN TRANSACTION;
    -- Import new customer data
    INSERT INTO Customers (Name, Email)
    SELECT Name, Email 
    FROM ImportedCustomerData;
    
    -- Check for duplicate emails
    IF EXISTS (
        SELECT 1 
        FROM Customers 
        GROUP BY Email 
        HAVING COUNT(*) > 1
    )
    BEGIN
        ROLLBACK;  -- Cancel import if duplicates found
        PRINT 'Duplicate emails found';
    END
    ELSE
    BEGIN
        COMMIT;  -- Complete import if no duplicates
        PRINT 'Import successful';
    END
```

5. Testing Changes Before Committing:
```sql
BEGIN TRANSACTION;
    -- Make complex changes
    UPDATE Employees 
    SET Salary = Salary * 1.1 
    WHERE Department = 'IT';
    
    -- Review the changes
    SELECT * FROM Employees WHERE Department = 'IT';
    
    -- You can now decide:
    -- ROLLBACK; -- to cancel changes
    -- or
    -- COMMIT; -- to keep changes
```

Important Notes:
1. Not all databases support transactions the same way - these examples use SQL Server syntax
2. Some commands (like CREATE TABLE) automatically commit and cannot be rolled back
3. Transactions should be kept as short as possible to avoid locking tables for too long
4. Always remember to either COMMIT or ROLLBACK - don't leave transactions hanging

-------------------------------------------------------------

I'll break down each example step by step!

1. Basic Price Increase Example:
```sql
BEGIN TRANSACTION;
    UPDATE Products 
    SET Price = Price * 1.1;  
    ROLLBACK;
```
Step 1: BEGIN TRANSACTION tells database "start watching my changes"
Step 2: UPDATE increases all product prices by 10% (multiplies by 1.1)
Step 3: ROLLBACK cancels everything - prices go back to original values

2. Order Processing Example:
```sql
BEGIN TRANSACTION;
    INSERT INTO Orders (CustomerID, OrderDate) 
    VALUES (1, '2024-10-20');
    
    UPDATE Products 
    SET Stock = Stock - 1 
    WHERE ProductID = 123;
    
    COMMIT;
```
Step 1: BEGIN TRANSACTION starts watching changes
Step 2: INSERT creates new order for Customer #1
Step 3: UPDATE reduces product stock by 1
Step 4: COMMIT saves both changes permanently
If anything fails before COMMIT, nothing happens (both operations cancelled)

3. Bank Account Example:
```sql
BEGIN TRANSACTION;
    UPDATE Accounts 
    SET Balance = Balance - 1000 
    WHERE AccountID = 1;
    
    IF EXISTS (SELECT 1 FROM Accounts WHERE AccountID = 1 AND Balance < 0) 
    BEGIN
        ROLLBACK;
        PRINT 'Insufficient funds';
    END
    ELSE
    BEGIN
        COMMIT;
        PRINT 'Withdrawal successful';
    END
```
Step 1: Start transaction
Step 2: Try to withdraw $1000
Step 3: Check if account went negative
Step 4a: If negative → ROLLBACK (cancel withdrawal)
Step 4b: If not negative → COMMIT (complete withdrawal)

4. Customer Import Example:
```sql
BEGIN TRANSACTION;
    INSERT INTO Customers (Name, Email)
    SELECT Name, Email 
    FROM ImportedCustomerData;
    
    IF EXISTS (
        SELECT 1 
        FROM Customers 
        GROUP BY Email 
        HAVING COUNT(*) > 1
    )
    BEGIN
        ROLLBACK;
        PRINT 'Duplicate emails found';
    END
    ELSE
    BEGIN
        COMMIT;
        PRINT 'Import successful';
    END
```
Step 1: Start transaction
Step 2: Copy customer data from import table
Step 3: Check if any email appears more than once
Step 4a: If duplicates found → ROLLBACK (cancel import)
Step 4b: If no duplicates → COMMIT (keep import)

5. Salary Increase Example:
```sql
BEGIN TRANSACTION;
    UPDATE Employees 
    SET Salary = Salary * 1.1 
    WHERE Department = 'IT';
    
    SELECT * FROM Employees WHERE Department = 'IT';
    
    -- Now you decide: ROLLBACK or COMMIT
```
Step 1: Start transaction
Step 2: Increase IT department salaries by 10%
Step 3: Show the changes (for review)
Step 4: You can then choose:
   - ROLLBACK to cancel the raises
   - COMMIT to make raises permanent

Real-world Example:
Let's say you're updating customer addresses:
```sql
BEGIN TRANSACTION;
    -- First, let's see what we're changing
    SELECT * FROM Customers WHERE CustomerID = 1;
    
    -- Make the change
    UPDATE Customers
    SET Address = '123 New Street',
        City = 'New York'
    WHERE CustomerID = 1;
    
    -- Review the change
    SELECT * FROM Customers WHERE CustomerID = 1;
    
    -- If it looks correct:
    COMMIT;
    -- If it's wrong:
    -- ROLLBACK;
```

Think of TRANSACTION like making changes in Photoshop:
- BEGIN TRANSACTION = starting to edit
- Making changes = your edits
- ROLLBACK = pressing "Cancel"
- COMMIT = pressing "Save"

------------------------------------------------------------
what does the indentation means for the codes after begin transaction?


The indentation in SQL code is purely for readability - it doesn't affect how the code works. It's a coding style practice to make it easier to understand which commands are part of the transaction.

Let me show you - these two examples do exactly the same thing:

With indentation (more readable):
```sql
BEGIN TRANSACTION;
    UPDATE Products 
    SET Price = 100 
    WHERE ProductID = 1;
    
    INSERT INTO OrderLog 
    VALUES (1, 'Price updated');
COMMIT;
```

Without indentation (less readable, but works the same):
```sql
BEGIN TRANSACTION;
UPDATE Products 
SET Price = 100 
WHERE ProductID = 1;
INSERT INTO OrderLog 
VALUES (1, 'Price updated');
COMMIT;
```

Here's another example showing how indentation helps visualize logic:

Well-indented (easier to understand the flow):
```sql
BEGIN TRANSACTION;
    UPDATE Accounts 
    SET Balance = Balance - 100 
    WHERE AccountID = 1;
    
    IF EXISTS (SELECT 1 FROM Accounts WHERE Balance < 0) 
    BEGIN
        ROLLBACK;
        PRINT 'Not enough money';
    END
    ELSE
    BEGIN
        COMMIT;
        PRINT 'Transaction successful';
    END
```

No indentation (same code, harder to read):
```sql
BEGIN TRANSACTION;
UPDATE Accounts 
SET Balance = Balance - 100 
WHERE AccountID = 1;
IF EXISTS (SELECT 1 FROM Accounts WHERE Balance < 0) 
BEGIN
ROLLBACK;
PRINT 'Not enough money';
END
ELSE
BEGIN
COMMIT;
PRINT 'Transaction successful';
END
```

Key points about indentation:
1. It's just for human readability
2. SQL doesn't care about spaces or tabs
3. Common practice is to indent code inside:
   - Transactions
   - IF statements
   - BEGIN/END blocks
   - Sub-queries
4. Most SQL editors will automatically format your code with proper indentation

-----------------------------------------------------------
SELECT 1 FROM Accounts WHERE AccountID = 1 AND Balance < 0

what does this line means especially the select 1?

Ah, let me explain SELECT 1! It's a common way to check if records exist.

Let's break it down with different examples:

1. SELECT 1 just returns the number 1 for each matching row. It's a shorthand way to say "I just want to know if any rows exist":

```sql
-- These queries do the same thing:
SELECT 1 FROM Accounts WHERE Balance < 0
SELECT * FROM Accounts WHERE Balance < 0

-- But the difference in results looks like:
SELECT 1 FROM Accounts WHERE Balance < 0
Result: 
1    -- means found one row
1    -- found another row
1    -- found another row

SELECT * FROM Accounts WHERE Balance < 0
Result:
AccountID  |  Balance  |  Name    |  Email          -- returns all columns
1          |  -100     |  John    |  john@mail.com
2          |  -50      |  Mary    |  mary@mail.com
```

2. In IF EXISTS checks, SELECT 1 is commonly used because we only care if records exist, not what's in them:

```sql
-- These both work the same:
IF EXISTS (SELECT 1 FROM Accounts WHERE Balance < 0)
IF EXISTS (SELECT * FROM Accounts WHERE Balance < 0)

-- Real example:
BEGIN TRANSACTION;
    UPDATE Accounts 
    SET Balance = Balance - 100;
    
    IF EXISTS (SELECT 1 FROM Accounts WHERE Balance < 0)
    BEGIN
        ROLLBACK;  -- Found negative balance, cancel transaction
    END
    ELSE
    BEGIN
        COMMIT;    -- All balances okay, save changes
    END
```

3. You could use any number, it doesn't have to be 1:
```sql
-- All these do the same thing:
SELECT 1 FROM Accounts WHERE Balance < 0
SELECT 2 FROM Accounts WHERE Balance < 0
SELECT 999 FROM Accounts WHERE Balance < 0
```

4. Why use SELECT 1 instead of SELECT *?
   - It's more efficient (doesn't fetch all columns)
   - It clearly shows your intention (just checking existence)
   - It's a common convention that other developers recognize

Here's a practical example showing the difference:
```sql
-- Checking if a customer has any orders
IF EXISTS (SELECT 1 FROM Orders WHERE CustomerID = 123)
BEGIN
    PRINT 'Customer has orders';
END

-- Actually getting order details
SELECT * FROM Orders WHERE CustomerID = 123;  -- Gets all order information
```

Think of SELECT 1 like a yes/no question:
- SELECT 1 = "Are there any records matching this condition?"
- SELECT * = "Tell me everything about records matching this condition"

