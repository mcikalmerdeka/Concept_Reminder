import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Set random seed for reproducibility
np.random.seed(42)

# Create a non-normal distribution (e.g., exponential)
population = np.random.exponential(scale=1.0, size=100000)

# Function to calculate sample means
def sample_means(data, sample_size, num_samples):
    return [np.mean(data[np.random.choice(len(data), sample_size)]) for _ in range(num_samples)]

# Set parameters
sample_sizes = [10, 30, 50, 100]
num_samples = 10000

# Create subplots
fig, axes = plt.subplots(3, 2, figsize=(15, 20))
fig.suptitle('Central Limit Theorem Demonstration', fontsize=16)

# Plot population distribution
axes[0, 0].hist(population, bins=100, density=True, alpha=0.7)
axes[0, 0].set_title('Population Distribution (Exponential)')
axes[0, 0].set_xlabel('Value')
axes[0, 0].set_ylabel('Frequency')

# Plot theoretical exponential distribution
x = np.linspace(0, np.max(population), 100)
axes[0, 0].plot(x, np.exp(-x), linewidth=2, color='r')

# Keep the bottom-right subplot empty
axes[0, 1].axis('off')

for i, size in enumerate(sample_sizes):
    # Calculate sample means
    means = sample_means(population, size, num_samples)
    
    # Create DataFrame
    df = pd.DataFrame({'Sample Means': means})
    
    # Plot histogram
    ax = axes[(i + 2) // 2, (i + 2) % 2]
    df['Sample Means'].hist(bins=50, ax=ax, density=True, alpha=0.7)
    
    # Plot normal distribution
    x = np.linspace(df['Sample Means'].min(), df['Sample Means'].max(), 100)
    ax.plot(x, np.exp(-(x - np.mean(means))**2 / (2 * np.var(means))) 
            / np.sqrt(2 * np.pi * np.var(means)), 
            linewidth=2, color='r')
    
    ax.set_title(f'Sample Size: {size}')
    ax.set_xlabel('Sample Mean')
    ax.set_ylabel('Frequency')

plt.tight_layout()
plt.show()

# Print statistics
print("Population mean:", np.mean(population))
print("Population standard deviation:", np.std(population))

for size in sample_sizes:
    means = sample_means(population, size, num_samples)
    print(f"\nSample size: {size}")
    print(f"Mean of sample means: {np.mean(means):.4f}")
    print(f"Standard deviation of sample means: {np.std(means):.4f}")
    print(f"Expected standard error: {np.std(population) / np.sqrt(size):.4f}")