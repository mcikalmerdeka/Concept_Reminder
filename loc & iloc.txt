In pandas, a popular Python library for data manipulation and analysis, the `.loc` and `.iloc` are used for accessing and manipulating data within a DataFrame.

1. **`.loc`**: This is primarily label-based indexing. It is used to access a group of rows and columns by labels or a boolean array. The syntax is as follows:

    ```python
    DataFrame.loc[row_label, column_label]
    ```

    You can use single labels, lists of labels, or boolean conditions to filter rows and columns. Here's an example:

    ```python
    import pandas as pd

    data = {'Name': ['Alice', 'Bob', 'Charlie'],
            'Age': [25, 30, 35],
            'City': ['New York', 'San Francisco', 'Los Angeles']}

    df = pd.DataFrame(data, index=['row1', 'row2', 'row3'])

    # Accessing a single element
    print(df.loc['row1', 'Name'])

    # Accessing a row
    print(df.loc['row2'])

    # Accessing multiple rows and columns
    print(df.loc[['row1', 'row3'], ['Name', 'City']])
    ```

2. **`.iloc`**: This is primarily integer-based indexing. It is used to access a group of rows and columns by integer positions. The syntax is similar to `.loc` but uses integer indices:

    ```python
    DataFrame.iloc[row_index, column_index]
    ```

    Here's an example:

    ```python
    # Accessing a single element
    print(df.iloc[0, 0])

    # Accessing a row
    print(df.iloc[1])

    # Accessing multiple rows and columns
    print(df.iloc[[0, 2], [0, 2]])
    ```

`.loc` and `.iloc` can be used for various operations such as selection, filtering, and assignment of values within a DataFrame. The choice between them depends on whether you want to use labels or integer positions for indexing. It's important to note that both `.loc` and `.iloc` are used for indexing based on rows and columns in a DataFrame.


Examples

loc
capacity_value = df_science_merge.loc[df_science_merge['id_first_major'] == 3321034, 'capacity'].values[0]

iloc
#Target values after sampling
value_counts = y_under.iloc[:, 0].value_counts()
print(value_counts)