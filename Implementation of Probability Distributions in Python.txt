Source: https://chat.deepseek.com/a/chat/s/72d0da4b-fa52-4be9-9e94-bdce8fb99421

---------------------------------------------------------------------------------------------------

Here's a comprehensive implementation of various probability distributions, categorized into discrete and continuous types, along with explanations and formulas:

### Categorized Probability Distributions

```python
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.special import gamma, beta, factorial  # Required for some distributions

# Set global style
plt.style.use('seaborn')
```

---

## 1. Discrete Distributions

### 1.1 Bernoulli Distribution
**Parameters**: p (probability of success)  
**PMF**: P(k) = p if k=1, 1-p if k=0  
**Use Case**: Binary outcomes (success/failure)

```python
# Bernoulli Distribution
p = 0.3
samples = np.random.binomial(1, p, 1000000)

plt.figure(figsize=(8,5))
sns.histplot(samples, bins=2, discrete=True, stat='density', color='skyblue')

# Theoretical PMF
plt.plot([0,1], [1-p, p], 'ro', markersize=8)
plt.vlines([0,1], 0, [1-p, p], colors='r', linewidths=2)
plt.title(f"Bernoulli Distribution (p={p})")
plt.xlabel("Value"), plt.ylabel("Probability")
plt.xticks([0,1])
plt.show()
```

### 1.2 Binomial Distribution
**Parameters**: n (trials), p (success probability)  
**PMF**: P(k) = C(n,k)pᵏ(1-p)ⁿ⁻ᵏ  
**Use Case**: Number of successes in n trials

```python
# Binomial Distribution
n, p = 10, 0.5
samples = np.random.binomial(n, p, 1000000)

plt.figure(figsize=(8,5))
sns.histplot(samples, bins=np.arange(n+2)-0.5, discrete=True, stat='density', color='lightgreen')

# Theoretical PMF
k_values = np.arange(n+1)
pmf = [np.math.comb(n,k)*(p**k)*((1-p)**(n-k)) for k in k_values]
plt.plot(k_values, pmf, 'ro-')
plt.title(f"Binomial Distribution (n={n}, p={p})")
plt.xlabel("Value"), plt.ylabel("Probability")
plt.show()
```

---

## 2. Continuous Distributions

### 2.1 Standard Normal Distribution
**Parameters**: μ=0, σ=1  
**PDF**: f(x) = (1/√(2πσ²))e^(-(x-μ)²/(2σ²))  
**Use Case**: Natural phenomena, Z-scores

```python
# Standard Normal Distribution
samples = np.random.randn(1000000)

plt.figure(figsize=(8,5))
sns.histplot(samples, bins=100, kde=True, color='royalblue', stat="density")

x = np.linspace(-4,4,1000)
y = (1/(np.sqrt(2*np.pi)))*np.exp(-0.5*x**2)
plt.plot(x, y, 'r-', linewidth=2)
plt.title("Standard Normal Distribution")
plt.xlabel("Value"), plt.ylabel("Density")
plt.show()
```

### 2.2 Exponential Distribution
**Parameter**: λ (rate parameter)  
**PDF**: f(x) = λe^(-λx) for x ≥ 0  
**Use Case**: Time between events in Poisson process

```python
# Exponential Distribution
lambda_ = 0.5
samples = np.random.exponential(1/lambda_, 1000000)

plt.figure(figsize=(8,5))
sns.histplot(samples, bins=100, kde=True, color='orange', stat="density")

x = np.linspace(0, 10, 1000)
y = lambda_ * np.exp(-lambda_*x)
plt.plot(x, y, 'r-', linewidth=2)
plt.title(f"Exponential Distribution (λ={lambda_})")
plt.xlabel("Value"), plt.ylabel("Density")
plt.show()
```

---

## 3. Advanced Continuous Distributions

### 3.1 Gamma Distribution
**Parameters**: k (shape), θ (scale)  
**PDF**: f(x) = x^(k-1)e^(-x/θ)/(θ^kΓ(k))  
**Use Case**: Waiting time for multiple Poisson events

```python
# Gamma Distribution
k, theta = 5, 1.0
samples = np.random.gamma(k, theta, 1000000)

plt.figure(figsize=(8,5))
sns.histplot(samples, bins=100, kde=True, color='purple', stat="density")

x = np.linspace(0, 20, 1000)
y = (x**(k-1) * np.exp(-x/theta)) / (theta**k * gamma(k))
plt.plot(x, y, 'r-', linewidth=2)
plt.title(f"Gamma Distribution (k={k}, θ={theta})")
plt.xlabel("Value"), plt.ylabel("Density")
plt.show()
```

### 3.2 Student's t-Distribution
**Parameter**: ν (degrees of freedom)  
**PDF**: f(x) = Γ((ν+1)/2)/(√(νπ)Γ(ν/2))(1+x²/ν)^(-(ν+1)/2)  
**Use Case**: Small sample statistics

```python
# Student's t-Distribution
df = 5
samples = np.random.standard_t(df, 1000000)

plt.figure(figsize=(8,5))
sns.histplot(samples, bins=100, kde=True, color='teal', stat="density")

x = np.linspace(-5,5,1000)
y = (gamma((df+1)/2)/(np.sqrt(df*np.pi)*gamma(df/2))) * (1+x**2/df)**(-(df+1)/2)
plt.plot(x, y, 'r-', linewidth=2)
plt.title(f"Student's t-Distribution (df={df})")
plt.xlabel("Value"), plt.ylabel("Density")
plt.show()
```

---

## 4. Specialized Distributions

### 4.1 Beta Distribution
**Parameters**: α, β > 0  
**PDF**: f(x) = x^(α-1)(1-x)^(β-1)/B(α,β)  
**Use Case**: Modeling probabilities

```python
# Beta Distribution
a, b = 2, 5
samples = np.random.beta(a, b, 1000000)

plt.figure(figsize=(8,5))
sns.histplot(samples, bins=100, kde=True, color='coral', stat="density")

x = np.linspace(0,1,1000)
y = (x**(a-1)*(1-x)**(b-1))/beta(a,b)
plt.plot(x, y, 'r-', linewidth=2)
plt.title(f"Beta Distribution (α={a}, β={b})")
plt.xlabel("Value"), plt.ylabel("Density")
plt.show()
```

### 4.2 Weibull Distribution
**Parameters**: λ (scale), k (shape)  
**PDF**: f(x) = (k/λ)(x/λ)^(k-1)e^(-(x/λ)^k)  
**Use Case**: Reliability analysis

```python
# Weibull Distribution
shape, scale = 1.5, 2.0
samples = np.random.weibull(shape, 1000000)*scale

plt.figure(figsize=(8,5))
sns.histplot(samples, bins=100, kde=True, color='gold', stat="density")

x = np.linspace(0,10,1000)
y = (shape/scale)*(x/scale)**(shape-1)*np.exp(-(x/scale)**shape)
plt.plot(x, y, 'r-', linewidth=2)
plt.title(f"Weibull Distribution (k={shape}, λ={scale})")
plt.xlabel("Value"), plt.ylabel("Density")
plt.show()
```

---

## Key Formulas
1. **Normal**: Gaussian curve for natural phenomena
2. **Exponential**: Memoryless property for waiting times
3. **Gamma**: Generalization of Erlang and Chi-squared
4. **Beta**: Flexible distribution for [0,1] bounded data
5. **Weibull**: Flexible failure rate modeling

This collection covers fundamental probability distributions with practical implementations and visualizations. Each distribution includes its key parameters, mathematical formula, and typical use cases for better understanding.

---------------------------------------------------------------------------------------------------

okay next can you give explanation about each of those distributions? like their definition or something

Here's a comprehensive explanation of each probability distribution from our previous implementation, organized by category with key details:

---

## **I. Discrete Distributions**

### **1. Bernoulli Distribution**
- **Definition**: Models single trial with binary outcome (success/failure)
- **Parameter**: p (probability of success, 0 ≤ p ≤ 1)
- **PMF**:  
  P(X=k) = p if k=1  
  P(X=k) = 1-p if k=0
- **Use Cases**: Coin flips, yes/no decisions, binary classification
- **Example**: Probability of getting heads in a coin toss (p=0.5)

### **2. Binomial Distribution**
- **Definition**: Counts successes in n independent Bernoulli trials
- **Parameters**:  
  n = number of trials  
  p = success probability
- **PMF**:  
  P(X=k) = C(n,k)pᵏ(1-p)ⁿ⁻ᵏ
- **Use Cases**: Quality control, survey responses, A/B testing
- **Example**: Number of defective items in a production batch

### **3. Poisson Distribution** (Missing in previous code)
- **Definition**: Counts events in fixed interval with constant rate
- **Parameter**: λ (average rate/event count)
- **PMF**:  
  P(X=k) = (λᵏe⁻λ)/k!
- **Use Cases**: Call center arrivals, radioactive decay, website visits
- **Example**: Number of customers arriving per hour at a store

---

## **II. Continuous Distributions**

### **1. Standard Normal Distribution**
- **Definition**: Symmetric bell-shaped distribution with μ=0, σ=1
- **Parameters**: None (standardized)
- **PDF**:  
  f(x) = (1/√(2π))e^(-x²/2)
- **Use Cases**: Z-scores, measurement errors, natural phenomena
- **Example**: Heights of people (when standardized)

### **2. Exponential Distribution**
- **Definition**: Models time between events in Poisson process
- **Parameter**: λ (rate parameter)
- **PDF**:  
  f(x) = λe^(-λx) for x ≥ 0
- **Use Cases**: Equipment lifetimes, queueing systems, radioactive decay
- **Example**: Time between earthquakes in a seismic zone

### **3. Uniform Distribution** (Missing in previous code)
- **Definition**: Equal probability over fixed interval [a,b]
- **Parameters**:  
  a = minimum value  
  b = maximum value
- **PDF**:  
  f(x) = 1/(b-a) for a ≤ x ≤ b
- **Use Cases**: Random number generation, bootstrap methods
- **Example**: Fair dice rolls (a=1, b=6)

---

## **III. Advanced Continuous Distributions**

### **1. Gamma Distribution**
- **Definition**: Generalizes exponential distribution for multiple events
- **Parameters**:  
  k = shape (number of events)  
  θ = scale
- **PDF**:  
  f(x) = x^(k-1)e^(-x/θ)/(θᵏΓ(k))
- **Use Cases**: Insurance claims, rainfall amounts, wait times
- **Example**: Total rainfall accumulated in a reservoir

### **2. Student's t-Distribution**
- **Definition**: Heavy-tailed distribution for small samples
- **Parameter**: ν (degrees of freedom)
- **PDF**:  
  f(x) = Γ((ν+1)/2)/(√(νπ)Γ(ν/2))(1+x²/ν)^(-(ν+1)/2)
- **Use Cases**: Small sample statistics, confidence intervals
- **Example**: Estimating population mean with n < 30

---

## **IV. Specialized Distributions**

### **1. Beta Distribution**
- **Definition**: Models probabilities (bounded between 0 and 1)
- **Parameters**:  
  α > 0, β > 0 (shape parameters)
- **PDF**:  
  f(x) = x^(α-1)(1-x)^(β-1)/B(α,β)
- **Use Cases**: Bayesian analysis, proportion modeling
- **Example**: Click-through rate probability estimation

### **2. Weibull Distribution**
- **Definition**: Flexible failure time distribution
- **Parameters**:  
  λ = scale  
  k = shape
- **PDF**:  
  f(x) = (k/λ)(x/λ)^(k-1)e^(-(x/λ)^k)
- **Use Cases**: Reliability engineering, survival analysis
- **Example**: Time-to-failure of mechanical components

---

## **Key Relationships**
1. **Bernoulli → Binomial**: Sum of n Bernoulli trials
2. **Exponential → Gamma**: Sum of k exponential variables
3. **Normal → t-Distribution**: Normal with adjusted tails for small samples
4. **Uniform → Beta**: Special case when α=β=1

---------------------------------------------------------------------------------------------------

can you give me the code that you were missing before? i believe you said you miss Poisson, Uniform, and maybe others?

Here's the complete code implementation for the missing distributions (Poisson, Uniform, and additional ones), following the same structure and style as previous examples:

---

### **1. Poisson Distribution (Discrete)**
**Parameters**: λ (lambda - average rate/unit)  
**PMF**: P(X=k) = (λᵏe⁻λ)/k!  
**Use Case**: Modeling event counts in fixed intervals

```python
# Poisson Distribution
lambda_ = 5
samples = np.random.poisson(lambda_, 1000000)

plt.figure(figsize=(8,5))
sns.histplot(samples, bins=np.arange(0, 20)-0.5, discrete=True, 
             stat='density', color='mediumpurple')

# Theoretical PMF
k_values = np.arange(0, 20)
pmf = (np.exp(-lambda_) * (lambda_**k_values)) / factorial(k_values)
plt.plot(k_values, pmf, 'ro-', markersize=4)
plt.title(f"Poisson Distribution (λ={lambda_})")
plt.xlabel("Number of Events"), plt.ylabel("Probability")
plt.show()
```

---

### **2. Uniform Distribution (Continuous)**
**Parameters**: a (minimum), b (maximum)  
**PDF**: f(x) = 1/(b-a) for a ≤ x ≤ b  
**Use Case**: Equal probability scenarios

```python
# Uniform Distribution
a, b = 2, 5
samples = np.random.uniform(a, b, 1000000)

plt.figure(figsize=(8,5))
sns.histplot(samples, bins=50, kde=False, color='salmon', stat="density")

# Theoretical PDF
x = np.linspace(a-1, b+1, 1000)
y = np.where((x >= a) & (x <= b), 1/(b-a), 0)
plt.plot(x, y, 'r-', linewidth=2)
plt.title(f"Uniform Distribution (a={a}, b={b})")
plt.xlabel("Value"), plt.ylabel("Density")
plt.show()
```

---

### **3. Geometric Distribution (Discrete)**
**Parameters**: p (success probability)  
**PMF**: P(X=k) = (1-p)ᵏ⁻¹p  
**Use Case**: Trials until first success

```python
# Geometric Distribution
p = 0.3
samples = np.random.geometric(p, 1000000)  # Returns k-1

plt.figure(figsize=(8,5))
sns.histplot(samples+1, bins=np.arange(1, 11)-0.5, 
             discrete=True, stat='density', color='darkseagreen')

# Theoretical PMF
k_values = np.arange(1, 11)
pmf = (1-p)**(k_values-1) * p
plt.plot(k_values, pmf, 'ro-', markersize=4)
plt.title(f"Geometric Distribution (p={p})")
plt.xlabel("Trial of First Success"), plt.ylabel("Probability")
plt.show()
```

---

### **4. Log-Normal Distribution (Continuous)**
**Parameters**: μ (log-mean), σ (log-std)  
**PDF**: f(x) = 1/(xσ√(2π)) exp(-(lnx - μ)²/(2σ²))  
**Use Case**: Multiplicative processes

```python
# Log-Normal Distribution
mu, sigma = 0, 0.5
samples = np.random.lognormal(mu, sigma, 1000000)

plt.figure(figsize=(8,5))
sns.histplot(samples, bins=100, kde=True, color='peru', stat="density")

x = np.linspace(0, 8, 1000)
pdf = (1/(x*sigma*np.sqrt(2*np.pi)) * np.exp(-(np.log(x)-mu)**2/(2*sigma**2))
plt.plot(x, pdf, 'r-', linewidth=2)
plt.title(f"Log-Normal Distribution (μ={mu}, σ={sigma})")
plt.xlabel("Value"), plt.ylabel("Density")
plt.show()
```

---

### **5. Chi-Squared Distribution (Continuous)**
**Parameter**: k (degrees of freedom)  
**PDF**: f(x) = x^(k/2-1)e^(-x/2)/(2^(k/2)Γ(k/2))  
**Use Case**: Statistical hypothesis testing

```python
# Chi-Squared Distribution
k = 4
samples = np.random.chisquare(k, 1000000)

plt.figure(figsize=(8,5))
sns.histplot(samples, bins=100, kde=True, color='steelblue', stat="density")

x = np.linspace(0, 20, 1000)
pdf = (x**(k/2-1) * np.exp(-x/2)) / (2**(k/2) * gamma(k/2))
plt.plot(x, pdf, 'r-', linewidth=2)
plt.title(f"Chi-Squared Distribution (k={k})")
plt.xlabel("Value"), plt.ylabel("Density")
plt.show()
```

---

### **Key Implementation Notes**
1. **Poisson**: Uses discrete bins aligned with integer values
2. **Uniform**: Explicit PDF plotting avoids KDE distortion
3. **Geometric**: Adjusts numpy's 0-based output to standard 1-based definition
4. **Log-Normal**: Handles logarithmic transformation of normal distribution
5. **Chi-Squared**: Special case of gamma distribution (k=ν/2, θ=2)