Source: https://claude.ai/chat/19519dfa-d11e-466d-b30c-ed1aebcd9318

---------------------------------------------------------------------------------------------------

what is pprint and how is it different from using normal print function, can you give complete explanation with several examples to compare

# Pretty Print (pprint) vs. Regular Print in Python

The `pprint` module in Python provides a way to "pretty-print" data structures in a more readable format than the standard `print` function. Let me explain the key differences and show you some examples.

## Main Differences

1. **Formatted Output**: `pprint` formats complex data structures with proper indentation and line breaks
2. **Width Control**: `pprint` tries to fit output within a specified width (default 80 characters)
3. **Sorted Output**: `pprint` can sort dictionary keys for consistent output
4. **Recursive Structure Handling**: `pprint` identifies recursive structures and marks them instead of causing infinite recursion

## Basic Usage

```python
import pprint

# Create a pretty printer object
pp = pprint.PrettyPrinter(indent=4)  # 4 spaces indentation
pp.pprint(your_data)

# Or use the shorthand function
from pprint import pprint
pprint(your_data)
```

## Examples Comparing print vs. pprint

### Example 1: Nested Dictionary

```python
import pprint

# Complex nested dictionary
data = {
    'users': [
        {'name': 'John', 'age': 30, 'roles': ['admin', 'developer', 'tester'], 'metadata': {'joined': '2020-01-15', 'status': 'active', 'projects': ['Apollo', 'Artemis', 'Phoenix']}},
        {'name': 'Alice', 'age': 25, 'roles': ['manager', 'analyst'], 'metadata': {'joined': '2021-03-22', 'status': 'active', 'projects': ['Chronos', 'Hyperion']}}
    ],
    'settings': {'theme': 'dark', 'notifications': True, 'language': 'en-US'},
    'version': '2.3.1'
}

# Regular print
print("Regular print output:")
print(data)

# Pretty print
print("\nPretty print output:")
pprint.pprint(data)
```

Output:
```
Regular print output:
{'users': [{'name': 'John', 'age': 30, 'roles': ['admin', 'developer', 'tester'], 'metadata': {'joined': '2020-01-15', 'status': 'active', 'projects': ['Apollo', 'Artemis', 'Phoenix']}}, {'name': 'Alice', 'age': 25, 'roles': ['manager', 'analyst'], 'metadata': {'joined': '2021-03-22', 'status': 'active', 'projects': ['Chronos', 'Hyperion']}}], 'settings': {'theme': 'dark', 'notifications': True, 'language': 'en-US'}, 'version': '2.3.1'}

Pretty print output:
{'settings': {'language': 'en-US',
              'notifications': True,
              'theme': 'dark'},
 'users': [{'age': 30,
            'metadata': {'joined': '2020-01-15',
                         'projects': ['Apollo', 'Artemis', 'Phoenix'],
                         'status': 'active'},
            'name': 'John',
            'roles': ['admin', 'developer', 'tester']},
           {'age': 25,
            'metadata': {'joined': '2021-03-22',
                         'projects': ['Chronos', 'Hyperion'],
                         'status': 'active'},
            'name': 'Alice',
            'roles': ['manager', 'analyst']}],
 'version': '2.3.1'}
```

### Example 2: Controlling Width

```python
import pprint

# Long list of items
long_list = ["Item " + str(i) * 3 for i in range(10)]

# Regular print
print("Regular print:")
print(long_list)

# Pretty print with default width (80)
print("\nPretty print with default width:")
pprint.pprint(long_list)

# Pretty print with custom width (40)
print("\nPretty print with width=40:")
pp = pprint.PrettyPrinter(width=40)
pp.pprint(long_list)
```

Output:
```
Regular print:
['Item 000', 'Item 111', 'Item 222', 'Item 333', 'Item 444', 'Item 555', 'Item 666', 'Item 777', 'Item 888', 'Item 999']

Pretty print with default width:
['Item 000',
 'Item 111',
 'Item 222',
 'Item 333',
 'Item 444',
 'Item 555',
 'Item 666',
 'Item 777',
 'Item 888',
 'Item 999']

Pretty print with width=40:
['Item 000',
 'Item 111',
 'Item 222',
 'Item 333',
 'Item 444',
 'Item 555',
 'Item 666',
 'Item 777',
 'Item 888',
 'Item 999']
```

### Example 3: Handling Recursive Structures

```python
import pprint

# Create a recursive structure
recursive_list = [1, 2, 3]
recursive_list.append(recursive_list)  # List contains itself

# Regular print would cause infinite recursion
print("Regular print would cause error for recursive structures")
# print(recursive_list)  # This would cause RecursionError

# Pretty print handles it
print("\nPretty print with recursive structure:")
pprint.pprint(recursive_list)
```

Output:
```
Regular print would cause error for recursive structures

Pretty print with recursive structure:
[1, 2, 3, [...]]
```

### Example 4: Custom Formatting Options

```python
import pprint

data = {'name': 'Jane', 'scores': [95, 87, 92, 88], 'classes': {'math': 'A', 'physics': 'B+', 'history': 'A-'}}

# Regular print
print("Regular print:")
print(data)

# Basic pretty print
print("\nBasic pretty print:")
pprint.pprint(data)

# Custom indentation
print("\nPretty print with indent=2:")
pp = pprint.PrettyPrinter(indent=2)
pp.pprint(data)

# Control depth
print("\nPretty print with depth=1 (shallow):")
pp = pprint.PrettyPrinter(depth=1)
pp.pprint(data)

# Sort dictionary keys
print("\nPretty print with sort_dicts=True:")
pp = pprint.PrettyPrinter(sort_dicts=True)  # Python 3.8+ only
pp.pprint(data)

# Compact display
print("\nPretty print with compact=True:")
pp = pprint.PrettyPrinter(compact=True)
pp.pprint(data)
```

Output (approximate):
```
Regular print:
{'name': 'Jane', 'scores': [95, 87, 92, 88], 'classes': {'math': 'A', 'physics': 'B+', 'history': 'A-'}}

Basic pretty print:
{'classes': {'history': 'A-', 'math': 'A', 'physics': 'B+'},
 'name': 'Jane',
 'scores': [95, 87, 92, 88]}

Pretty print with indent=2:
{'classes': {'history': 'A-',
           'math': 'A',
           'physics': 'B+'},
 'name': 'Jane',
 'scores': [95, 87, 92, 88]}

Pretty print with depth=1 (shallow):
{'classes': {...}, 'name': 'Jane', 'scores': [...]}

Pretty print with sort_dicts=True:
{'classes': {'history': 'A-', 'math': 'A', 'physics': 'B+'},
 'name': 'Jane',
 'scores': [95, 87, 92, 88]}

Pretty print with compact=True:
{'classes': {'history': 'A-', 'math': 'A', 'physics': 'B+'},
 'name': 'Jane', 'scores': [95, 87, 92, 88]}
```

## When to Use pprint vs. print

- **Use `print` for**:
  - Simple variables or short data structures
  - Quick debugging output
  - Performance-critical code (pprint is slower)

- **Use `pprint` for**:
  - Complex nested data structures (dictionaries, lists, etc.)
  - JSON responses from APIs
  - Database query results
  - Debug output that needs to be analyzed
  - Logs that humans need to read

The `pprint` module makes understanding complex data structures much easier, especially during debugging or when working with data from external sources.