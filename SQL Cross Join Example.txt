Input: 
Students table:
+------------+--------------+
| student_id | student_name |
+------------+--------------+
| 1          | Alice        |
| 2          | Bob          |
| 13         | John         |
| 6          | Alex         |
+------------+--------------+
Subjects table:
+--------------+
| subject_name |
+--------------+
| Math         |
| Physics      |
| Programming  |
+--------------+
Examinations table:
+------------+--------------+
| student_id | subject_name |
+------------+--------------+
| 1          | Math         |
| 1          | Physics      |
| 1          | Programming  |
| 2          | Programming  |
| 1          | Physics      |
| 1          | Math         |
| 13         | Math         |
| 13         | Programming  |
| 13         | Physics      |
| 2          | Math         |
| 1          | Math         |
+------------+--------------+
Output: 
+------------+--------------+--------------+----------------+
| student_id | student_name | subject_name | attended_exams |
+------------+--------------+--------------+----------------+
| 1          | Alice        | Math         | 3              |
| 1          | Alice        | Physics      | 2              |
| 1          | Alice        | Programming  | 1              |
| 2          | Bob          | Math         | 1              |
| 2          | Bob          | Physics      | 0              |
| 2          | Bob          | Programming  | 1              |
| 6          | Alex         | Math         | 0              |
| 6          | Alex         | Physics      | 0              |
| 6          | Alex         | Programming  | 0              |
| 13         | John         | Math         | 1              |
| 13         | John         | Physics      | 1              |
| 13         | John         | Programming  | 1              |
+------------+--------------+--------------+----------------+

can you give explanation on that code what the output will look like for each strep?
----------------------------------------------------------


I'll break down the query step by step and show you what the output looks like at each stage.

1. First, let's see what the CROSS JOIN between Students and Subjects produces:

```sql
SELECT s.student_id, s.student_name, sub.subject_name
FROM Students s
CROSS JOIN Subjects sub;
```

This produces:
```
+------------+--------------+--------------+
| student_id | student_name | subject_name |
+------------+--------------+--------------+
| 1          | Alice        | Math         |
| 1          | Alice        | Physics      |
| 1          | Alice        | Programming  |
| 2          | Bob          | Math         |
| 2          | Bob          | Physics      |
| 2          | Bob          | Programming  |
| 6          | Alex         | Math         |
| 6          | Alex         | Physics      |
| 6          | Alex         | Programming  |
| 13         | John         | Math         |
| 13         | John         | Physics      |
| 13         | John         | Programming  |
+------------+--------------+--------------+
```

2. When we add the LEFT JOIN with Examinations:

```sql
SELECT s.student_id, s.student_name, sub.subject_name, e.subject_name as exam_taken
FROM Students s
CROSS JOIN Subjects sub
LEFT JOIN Examinations e 
    ON s.student_id = e.student_id 
    AND sub.subject_name = e.subject_name;
```

This would show (partial sample):
```
+------------+--------------+--------------+------------+
| student_id | student_name | subject_name | exam_taken |
+------------+--------------+--------------+------------+
| 1          | Alice        | Math         | Math       |
| 1          | Alice        | Math         | Math       |
| 1          | Alice        | Math         | Math       |
| 1          | Alice        | Physics      | Physics    |
| 1          | Alice        | Physics      | Physics    |
| 1          | Alice        | Programming  | Programming|
| 2          | Bob          | Math         | Math       |
| 2          | Bob          | Physics      | NULL       |
| 2          | Bob          | Programming  | Programming|
...
```

3. Finally, when we add the COUNT and GROUP BY:

```sql
SELECT 
    s.student_id,
    s.student_name,
    sub.subject_name,
    COUNT(e.subject_name) AS attended_exams
FROM Students s
CROSS JOIN Subjects sub
LEFT JOIN Examinations e 
    ON s.student_id = e.student_id 
    AND sub.subject_name = e.subject_name
GROUP BY s.student_id, s.student_name, sub.subject_name
ORDER BY s.student_id, sub.subject_name;
```

This gives us our final result where:
- Alice (ID 1) took Math 3 times, Physics 2 times, Programming 1 time
- Bob (ID 2) took Math 1 time, Physics 0 times, Programming 1 time
- Alex (ID 6) took no exams (all 0)
- John (ID 13) took each subject once

Key points to understand:
1. CROSS JOIN creates all possible student-subject combinations
2. LEFT JOIN preserves all these combinations even if no exam was taken
3. COUNT(e.subject_name) counts the actual occurrences:
   - If a student took an exam, it counts that occurrence
   - If they didn't (NULL from LEFT JOIN), it counts as 0
4. The GROUP BY combines all records for the same student-subject pair
5. The ORDER BY sorts first by student_id, then by subject_name

This gives us a complete view of how many times each student took each exam, including zero times for subjects they haven't taken yet.

----------------------------------------------------------
Let me explain CROSS JOIN in detail with a simpler example to make it clearer.

A CROSS JOIN creates all possible combinations (Cartesian product) between rows of two tables, regardless of whether they have common columns or not. It's like creating every possible pair between items in two lists.

Here's a simple example:

```sql
-- Table 1: Colors
CREATE TABLE Colors (color VARCHAR(10));
INSERT INTO Colors VALUES ('Red'), ('Blue');

-- Table 2: Sizes
CREATE TABLE Sizes (size VARCHAR(10));
INSERT INTO Sizes VALUES ('Small'), ('Large');

-- CROSS JOIN
SELECT * FROM Colors CROSS JOIN Sizes;
```

Result:
```
+-------+-------+
| color | size  |
+-------+-------+
| Red   | Small |
| Red   | Large |
| Blue  | Small |
| Blue  | Large |
+-------+-------+
```

This demonstrates that:
1. Each row from the first table is paired with EVERY row from the second table
2. If you have M rows in first table and N rows in second table, you get M × N rows in result

Let's relate this back to our original student-subjects example:

```sql
-- Students (4 rows)
+------------+--------------+
| student_id | student_name |
+------------+--------------+
| 1          | Alice        |
| 2          | Bob          |
| 13         | John         |
| 6          | Alex         |
+------------+--------------+

-- Subjects (3 rows)
+--------------+
| subject_name |
+--------------+
| Math         |
| Physics      |
| Programming  |
+--------------+

-- CROSS JOIN result (4 × 3 = 12 rows)
SELECT s.student_id, s.student_name, sub.subject_name
FROM Students s
CROSS JOIN Subjects sub;
```

Result:
```
+------------+--------------+--------------+
| student_id | student_name | subject_name |
+------------+--------------+--------------+
| 1          | Alice        | Math         |
| 1          | Alice        | Physics      |
| 1          | Alice        | Programming  |
| 2          | Bob          | Math         |
| 2          | Bob          | Physics      |
| 2          | Bob          | Programming  |
| 13         | John         | Math         |
| 13         | John         | Physics      |
| 13         | John         | Programming  |
| 6          | Alex         | Math         |
| 6          | Alex         | Physics      |
| 6          | Alex         | Programming  |
+------------+--------------+--------------+
```

Common use cases for CROSS JOIN:
1. Creating all possible combinations/pairs
   - Products × Colors
   - Employees × Shifts
   - Students × Subjects (like our example)

2. Generating test data
   ```sql
   SELECT number, letter 
   FROM Numbers CROSS JOIN Letters;
   ```

3. Creating a calendar or time series
   ```sql
   SELECT years.y, months.m 
   FROM Years CROSS JOIN Months;
   ```

Important notes:
1. No matching condition is needed (unlike INNER JOIN or LEFT JOIN)
2. Result size = (rows in table1) × (rows in table2)
3. Can be resource-intensive with large tables
4. Alternative syntax:
   ```sql
   -- These are equivalent:
   SELECT * FROM table1 CROSS JOIN table2;
   SELECT * FROM table1, table2;
   ```

So while CROSS JOIN can be used with tables that have common columns, its main purpose is to generate all possible combinations, which is particularly useful when you need to create a complete set of possibilities, like in our student-subjects example where we needed to show every student-subject combination, even if no exam was taken.