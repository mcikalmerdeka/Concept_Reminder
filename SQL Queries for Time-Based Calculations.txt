Source: https://claude.ai/chat/a2d2cc86-5b39-4c5e-8488-cc1e5bbe512e

------------------------------------------------------------

I'll create some example SQL queries for common time-based calculations using sample data.



```sql
-- Create sample sales table
CREATE TABLE sales (
    date_of_sale DATE,
    product_id INT,
    revenue DECIMAL(10,2)
);

-- Insert sample data
INSERT INTO sales VALUES
('2023-01-15', 1, 1000),
('2023-02-15', 1, 1200),
('2023-03-15', 1, 1100),
('2023-04-15', 1, 1300),
('2024-01-15', 1, 1100),
('2024-02-15', 1, 1400),
('2024-03-15', 1, 1250),
('2024-04-15', 1, 1500);

-- 1. Year-over-Year (YoY) Growth
WITH monthly_sales AS (
    SELECT 
        DATE_TRUNC('month', date_of_sale) AS month,
        EXTRACT(YEAR FROM date_of_sale) AS year,
        SUM(revenue) AS revenue
    FROM sales
    GROUP BY 1, 2
)
SELECT 
    current.month,
    current.revenue as current_revenue,
    prev.revenue as previous_revenue,
    ((current.revenue - prev.revenue) / prev.revenue * 100) as yoy_growth_percentage
FROM monthly_sales current
LEFT JOIN monthly_sales prev 
    ON current.month = prev.month + INTERVAL '1 year'
WHERE current.year = 2024
ORDER BY current.month;

/* Output:
month       current_revenue  previous_revenue  yoy_growth_percentage
2024-01-01  1100            1000             10.0
2024-02-01  1400            1200             16.7
2024-03-01  1250            1100             13.6
2024-04-01  1500            1300             15.4
*/

-- 2. Year-to-Date (YTD) Comparison
WITH ytd_sales AS (
    SELECT 
        EXTRACT(YEAR FROM date_of_sale) AS year,
        SUM(revenue) AS ytd_revenue
    FROM sales
    WHERE date_of_sale <= CURRENT_DATE
    GROUP BY 1
)
SELECT 
    current.year,
    current.ytd_revenue as current_ytd,
    prev.ytd_revenue as previous_ytd,
    ((current.ytd_revenue - prev.ytd_revenue) / prev.ytd_revenue * 100) as ytd_growth_percentage
FROM ytd_sales current
LEFT JOIN ytd_sales prev 
    ON current.year = prev.year + 1;

/* Output:
year  current_ytd  previous_ytd  ytd_growth_percentage
2024  5250         4600          14.1
*/

-- 3. Rolling 3-Month Average
SELECT 
    date_trunc('month', date_of_sale) AS month,
    SUM(revenue) as monthly_revenue,
    AVG(SUM(revenue)) OVER (
        ORDER BY date_trunc('month', date_of_sale)
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ) as rolling_3month_avg
FROM sales
GROUP BY 1
ORDER BY 1;

/* Output:
month       monthly_revenue  rolling_3month_avg
2023-01-01  1000            1000.0
2023-02-01  1200            1100.0
2023-03-01  1100            1100.0
2023-04-01  1300            1200.0
2024-01-01  1100            1166.7
2024-02-01  1400            1266.7
2024-03-01  1250            1250.0
2024-04-01  1500            1383.3
*/

-- 4. Month-over-Month (MoM) Growth
WITH monthly_sales AS (
    SELECT 
        DATE_TRUNC('month', date_of_sale) AS month,
        SUM(revenue) AS revenue
    FROM sales
    GROUP BY 1
)
SELECT 
    current.month,
    current.revenue as current_revenue,
    prev.revenue as previous_revenue,
    ((current.revenue - prev.revenue) / prev.revenue * 100) as mom_growth_percentage
FROM monthly_sales current
LEFT JOIN monthly_sales prev 
    ON current.month = prev.month + INTERVAL '1 month'
ORDER BY current.month;

/* Output:
month       current_revenue  previous_revenue  mom_growth_percentage
2023-01-01  1000            NULL              NULL
2023-02-01  1200            1000              20.0
2023-03-01  1100            1200              -8.3
2023-04-01  1300            1100              18.2
2024-01-01  1100            1300              -15.4
2024-02-01  1400            1100              27.3
2024-03-01  1250            1400              -10.7
2024-04-01  1500            1250              20.0
*/

-- 5. Quarter-to-Date (QTD) Comparison
WITH qtd_sales AS (
    SELECT 
        DATE_TRUNC('quarter', date_of_sale) AS quarter,
        SUM(revenue) AS qtd_revenue,
        COUNT(*) as transaction_count
    FROM sales
    GROUP BY 1
)
SELECT 
    quarter,
    qtd_revenue,
    transaction_count,
    LAG(qtd_revenue) OVER (ORDER BY quarter) as previous_quarter_revenue,
    ((qtd_revenue - LAG(qtd_revenue) OVER (ORDER BY quarter)) / 
      LAG(qtd_revenue) OVER (ORDER BY quarter) * 100) as qtd_growth_percentage
FROM qtd_sales
ORDER BY quarter;

/* Output:
quarter     qtd_revenue  transaction_count  previous_quarter_revenue  qtd_growth_percentage
2023-01-01  3300        3                  NULL                      NULL
2023-04-01  1300        1                  3300                      -60.6
2024-01-01  3750        3                  1300                      188.5
2024-04-01  1500        1                  3750                      -60.0
*/

```

I've created several examples of time-based SQL calculations with sample data. Each query demonstrates a different type of analysis:

1. Year-over-Year (YoY) Growth: Shows monthly revenue growth compared to the same month last year.
2. Year-to-Date (YTD) Comparison: Compares total revenue up to the current date between years.
3. Rolling 3-Month Average: Calculates a moving average of revenue over 3-month periods.
4. Month-over-Month (MoM) Growth: Shows revenue growth compared to the previous month.
5. Quarter-to-Date (QTD) Comparison: Compares quarterly revenue with growth calculations.

Each query includes:
- Sample data creation
- The actual query
- Example output

-------------------------------------------------------------
can you explain the step to step of what those query does please?


I'll break down each query step by step.

1. Year-over-Year (YoY) Growth:
```sql
-- First, create a CTE (Common Table Expression) to get monthly totals
WITH monthly_sales AS (
    SELECT 
        DATE_TRUNC('month', date_of_sale) AS month,  -- Truncate dates to first day of month
        EXTRACT(YEAR FROM date_of_sale) AS year,      -- Get the year
        SUM(revenue) AS revenue                       -- Sum revenue by month
    FROM sales
    GROUP BY 1, 2
)
-- Main query
SELECT 
    current.month,
    current.revenue as current_revenue,
    prev.revenue as previous_revenue,
    ((current.revenue - prev.revenue) / prev.revenue * 100) as yoy_growth_percentage
FROM monthly_sales current
LEFT JOIN monthly_sales prev                          -- Join the same table to itself
    ON current.month = prev.month + INTERVAL '1 year' -- Match current month with same month last year
WHERE current.year = 2024                            -- Only show 2024 data
ORDER BY current.month;
```

Steps:
1. Group sales by month and year, summing revenue
2. Join each month with the same month from previous year
3. Calculate percentage growth using formula: ((new - old) / old * 100)

2. Year-to-Date (YTD) Comparison:
```sql
WITH ytd_sales AS (
    SELECT 
        EXTRACT(YEAR FROM date_of_sale) AS year,      -- Get the year
        SUM(revenue) AS ytd_revenue                   -- Sum all revenue for the year
    FROM sales
    WHERE date_of_sale <= CURRENT_DATE               -- Only include dates up to today
    GROUP BY 1
)
SELECT 
    current.year,
    current.ytd_revenue as current_ytd,
    prev.ytd_revenue as previous_ytd,
    ((current.ytd_revenue - prev.ytd_revenue) / prev.ytd_revenue * 100) as ytd_growth_percentage
FROM ytd_sales current
LEFT JOIN ytd_sales prev                            -- Join the same table to itself
    ON current.year = prev.year + 1;                -- Match current year with previous year
```

Steps:
1. Sum revenue by year up to current date
2. Join each year with previous year
3. Calculate YTD growth percentage

3. Rolling 3-Month Average:
```sql
SELECT 
    date_trunc('month', date_of_sale) AS month,
    SUM(revenue) as monthly_revenue,
    AVG(SUM(revenue)) OVER (                        -- Window function for rolling average
        ORDER BY date_trunc('month', date_of_sale)
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW     -- Define 3-month window
    ) as rolling_3month_avg
FROM sales
GROUP BY 1
ORDER BY 1;
```

Steps:
1. Group sales by month
2. Use window function to create 3-month rolling window
3. Calculate average within each window

4. Month-over-Month (MoM) Growth:
```sql
WITH monthly_sales AS (
    SELECT 
        DATE_TRUNC('month', date_of_sale) AS month,  -- Truncate dates to first day of month
        SUM(revenue) AS revenue                      -- Sum revenue by month
    FROM sales
    GROUP BY 1
)
SELECT 
    current.month,
    current.revenue as current_revenue,
    prev.revenue as previous_revenue,
    ((current.revenue - prev.revenue) / prev.revenue * 100) as mom_growth_percentage
FROM monthly_sales current
LEFT JOIN monthly_sales prev                         -- Join the same table to itself
    ON current.month = prev.month + INTERVAL '1 month' -- Match with previous month
ORDER BY current.month;
```

Steps:
1. Group sales by month
2. Join each month with previous month
3. Calculate month-over-month growth percentage

5. Quarter-to-Date (QTD) Comparison:
```sql
WITH qtd_sales AS (
    SELECT 
        DATE_TRUNC('quarter', date_of_sale) AS quarter,  -- Truncate dates to first day of quarter
        SUM(revenue) AS qtd_revenue,                     -- Sum revenue by quarter
        COUNT(*) as transaction_count                    -- Count transactions
    FROM sales
    GROUP BY 1
)
SELECT 
    quarter,
    qtd_revenue,
    transaction_count,
    LAG(qtd_revenue) OVER (ORDER BY quarter) as previous_quarter_revenue,  -- Get previous quarter revenue
    ((qtd_revenue - LAG(qtd_revenue) OVER (ORDER BY quarter)) / 
      LAG(qtd_revenue) OVER (ORDER BY quarter) * 100) as qtd_growth_percentage
FROM qtd_sales
ORDER BY quarter;
```

Steps:
1. Group sales by quarter
2. Use LAG window function to access previous quarter's data
3. Calculate quarter-over-quarter growth percentage
4. Include transaction count for additional context

Key SQL Functions Used:
- `DATE_TRUNC`: Truncates timestamp to specified precision (month, quarter, year)
- `EXTRACT`: Pulls out specific part of a date (year, month, etc.)
- `LAG`: Window function to access previous row's data
- `OVER`: Defines window for window functions
- `LEFT JOIN`: Keeps all records from left table, even if no match in right table
- `INTERVAL`: Adds/subtracts time periods from dates